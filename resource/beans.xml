<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                http://www.springframework.org/schema/context  
                 http://www.springframework.org/schema/context/spring-context-3.2.xsd  
                http://www.springframework.org/schema/tx 
                http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
                http://www.springframework.org/schema/aop
				http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">  
    <!-- Root Context: defines shared resources visible to all other web components -->  
  
       <bean id="hello" class="springTest.beans.Hello">
       		<property name="name" value="Deer"></property>
       </bean>
       
       <bean id="hello1" class="springTest.beans.Hello"></bean>
       
       <bean id="hello2" class="springTest.beans.Hello">
       		<constructor-arg index="0" value="hasParam"></constructor-arg>
       </bean>
       
       <bean id="hello3" class="springTest.factory.HelloStaticFactory" factory-method="newInstance">
       		<constructor-arg index="0" value="staticFactory"></constructor-arg>
       </bean>
       
       <bean id="helloInstanceFactory" class="springTest.factory.HelloInstanceFactory"></bean>
       
       <bean id="hello4" factory-bean="helloInstanceFactory" factory-method="newInstance">
       		<constructor-arg index="0" value="instanceFactory"></constructor-arg>
       </bean>
       
       <!-- import dataSource -->
       <import resource="classpath:dsContext.xml" />
       
       
       <bean id="testDao" class="springTest.dao.imp.TestDao">
       		<property name="dataSource" ref="datasource"></property>
       </bean>
       
       <bean id="commonDao" class="deerSYS.common.CommonDao">
       		<property name="dataSource" ref="datasource"></property>
       </bean>
       
       <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       		<property name="configLocation" value="classpath:mybatisConf.xml"></property>
       		<property name="dataSource" ref="datasource"></property>
       </bean>
       
       <!-- 事务控制 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       		<property name="dataSource" ref="datasource"></property>
       </bean>
       
       <tx:advice id="tx" transaction-manager="transactionManager">
       		<tx:attributes>
       			<tx:method name="delete*" propagation="REQUIRED"/>
       			<tx:method name="insert*" propagation="REQUIRED"/>
       			<tx:method name="update*" propagation="REQUIRED"/>
       			<tx:method name="find*" read-only="true"/>
       			<tx:method name="get*" read-only="true"/>
       			<tx:method name="select*" read-only="true"/>
       		</tx:attributes>
       </tx:advice>
       
        <bean id="testDaoMybatis" class="springTest.dao.imp.TestDaoMybatis">
       		<property name="sqlSessionFactory" ref="sessionFactory"></property>
       </bean>
       
       <bean id="systemDao" class="deerSYS.system.dao.SystemDao">
       		<property name="sqlSessionFactory" ref="sessionFactory"></property>
       </bean>
       
       <bean id="userInfoDao" class="deerSYS.business.userInfo.dao.UserInfoDao">
       		<property name="sqlSessionFactory" ref="sessionFactory"></property>
       </bean>
       
       <bean id="simpleApplyDao" class="deerSYS.business.simpleApply.dao.SimpleApplyDao">
       		<property name="sqlSessionFactory" ref="sessionFactory"></property>
       </bean>
       
       <!-- springTest.dao.imp.TestDaoMybatis 
       没有实现接口，要使用AOP必须强制使用CGLIB动态代理。若实现接口则默认使用JDK动态代理，也可以强制使用CGLIB动态代理 -->
       <aop:aspectj-autoproxy proxy-target-class="true"/>
       
       <aop:config>
       		<aop:pointcut expression="execution(* springTest.dao..*.*(..))" id="pointCut"/>
       		<aop:advisor advice-ref="tx" pointcut-ref="pointCut"/>
       </aop:config>
       
		<!--  osworkflow配置     -->
       <bean id="workflowStore" class="osworkflow.service.SpringJDBCWorkflowStore">  
	        <property name="dataSource" ref="datasource"></property>  
	        <property name="entrySequence">  
	            <value>select count(*) + 1 from os_wfentry</value>  
	        </property>  
	        <property name="stepSequence">  
	            <value>select sum(c1) + 1 from (select 1 as tb,  count(id)  as c1 from os_currentstep union select 2 as tb, count(id) as c1 from os_historystep) as TabelaFinal</value>  
	        </property>  
	    </bean>  
          
    	<bean id="workflowTypeResolver" class="com.opensymphony.workflow.util.SpringTypeResolver"/>
    	
    	<bean id="workflowFactory" class="com.opensymphony.workflow.spi.hibernate.SpringWorkflowFactory" init-method="init">  
	        <property name="resource"><value>workflows.xml</value></property>  
	        <property name="reload"><value>false</value></property>  
	    </bean>  
	      
	    <bean id="osworkflowConfiguration" class="com.opensymphony.workflow.config.SpringConfiguration">  
	        <property name="store"><ref local="workflowStore"/></property>  
	        <property name="factory"><ref local="workflowFactory"/></property>          
	    </bean>
	    
	    <bean id="workflowTarget" class="com.opensymphony.workflow.basic.BasicWorkflow">  
	        <property name="configuration"><ref local="osworkflowConfiguration"/></property>    
	        <constructor-arg>  
	            <value>testUser</value>  
	        </constructor-arg>  
	    </bean>
      
       
<!--       <bean id="resourceBean" class="springTest.beans.ResourceBean" init-method="init" destroy-method="destroy">-->
<!--       		<property name="file" vlaue="E:/example/deer.txt"></property>-->
<!--       </bean>-->
<!--       -->
<!--       <bean id="dependentBean" class="springTest.beans.DependentBean" init-method="init" destroy-method="destory" depends-on="resourceBean">-->
<!--       		<property name="resourceBean" ref="resourceBean"></property>-->
<!--       </bean>-->
</beans> 
